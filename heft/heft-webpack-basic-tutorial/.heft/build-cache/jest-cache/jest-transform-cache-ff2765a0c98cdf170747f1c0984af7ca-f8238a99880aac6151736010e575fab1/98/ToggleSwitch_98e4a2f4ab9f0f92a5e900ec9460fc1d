ace471f0b97c822208c3e85be73f5b24
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToggleSwitch = void 0;
var React = require("react");
/**
 * An example component that renders a switch whose slider position can be "left" or "right".
 */
var ToggleSwitch = /** @class */ (function (_super) {
    __extends(ToggleSwitch, _super);
    function ToggleSwitch(props) {
        var _this = _super.call(this, props) || this;
        // React event handlers should be represented as fields instead of methods to ensure the "this" pointer
        // is bound correctly.  This form does not work with virtual/override inheritance, so use regular methods
        // everywhere else.
        _this._onClickSlider = function (event) {
            if (_this.state.sliderPosition === "left" /* Left */) {
                _this.setState({ sliderPosition: "right" /* Right */ });
            }
            else {
                _this.setState({ sliderPosition: "left" /* Left */ });
            }
            if (_this.props.onToggle) {
                _this.props.onToggle(_this, { sliderPosition: _this.state.sliderPosition });
            }
        };
        _this.state = {
            sliderPosition: "left" /* Left */
        };
        return _this;
    }
    ToggleSwitch.prototype.render = function () {
        var frameStyle = {
            borderRadius: '10px',
            backgroundColor: this.state.sliderPosition === "left" /* Left */
                ? this.props.leftColor
                : this.props.rightColor,
            width: '35px',
            height: '20px',
            cursor: 'pointer'
        };
        var sliderStyle = {
            borderRadius: '10px',
            backgroundColor: '#c0c0c0',
            width: '20px',
            height: '20px'
        };
        if (this.state.sliderPosition === "left" /* Left */) {
            sliderStyle.marginLeft = '0px';
            sliderStyle.marginRight = 'auto';
        }
        else {
            sliderStyle.marginLeft = 'auto';
            sliderStyle.marginRight = '0px';
        }
        return (React.createElement("div", { style: frameStyle, onClick: this._onClickSlider },
            React.createElement("div", { style: sliderStyle })));
    };
    return ToggleSwitch;
}(React.Component));
exports.ToggleSwitch = ToggleSwitch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXEdpdFxccnVzaHN0YWNrLXNhbXBsZXNcXGhlZnRcXGhlZnQtd2VicGFjay1iYXNpYy10dXRvcmlhbFxcc3JjXFxUb2dnbGVTd2l0Y2gudHN4Iiwic291cmNlcyI6WyJDOlxcR2l0XFxydXNoc3RhY2stc2FtcGxlc1xcaGVmdFxcaGVmdC13ZWJwYWNrLWJhc2ljLXR1dG9yaWFsXFxzcmNcXFRvZ2dsZVN3aXRjaC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZCQUErQjtBQTJDL0I7O0dBRUc7QUFDSDtJQUFrQyxnQ0FBdUQ7SUFDdkYsc0JBQW1CLEtBQXlCO1FBQTVDLFlBQ0Usa0JBQU0sS0FBSyxDQUFDLFNBSWI7UUFtQ0QsdUdBQXVHO1FBQ3ZHLHlHQUF5RztRQUN6RyxtQkFBbUI7UUFDWCxvQkFBYyxHQUFHLFVBQUMsS0FBdUI7WUFDL0MsSUFBSSxLQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsc0JBQThCLEVBQUU7Z0JBQzNELEtBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxjQUFjLHFCQUE0QixFQUFFLENBQUMsQ0FBQzthQUMvRDtpQkFBTTtnQkFDTCxLQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsY0FBYyxtQkFBMkIsRUFBRSxDQUFDLENBQUM7YUFDOUQ7WUFFRCxJQUFJLEtBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO2dCQUN2QixLQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFJLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO2FBQzFFO1FBQ0gsQ0FBQyxDQUFDO1FBbkRBLEtBQUksQ0FBQyxLQUFLLEdBQUc7WUFDWCxjQUFjLG1CQUEyQjtTQUMxQyxDQUFDOztJQUNKLENBQUM7SUFFTSw2QkFBTSxHQUFiO1FBQ0UsSUFBTSxVQUFVLEdBQXdCO1lBQ3RDLFlBQVksRUFBRSxNQUFNO1lBQ3BCLGVBQWUsRUFDYixJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsc0JBQThCO2dCQUNyRCxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTO2dCQUN0QixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVO1lBQzNCLEtBQUssRUFBRSxNQUFNO1lBQ2IsTUFBTSxFQUFFLE1BQU07WUFDZCxNQUFNLEVBQUUsU0FBUztTQUNsQixDQUFDO1FBQ0YsSUFBTSxXQUFXLEdBQXdCO1lBQ3ZDLFlBQVksRUFBRSxNQUFNO1lBQ3BCLGVBQWUsRUFBRSxTQUFTO1lBQzFCLEtBQUssRUFBRSxNQUFNO1lBQ2IsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDO1FBRUYsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsc0JBQThCLEVBQUU7WUFDM0QsV0FBVyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7WUFDL0IsV0FBVyxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUM7U0FDbEM7YUFBTTtZQUNMLFdBQVcsQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDO1lBQ2hDLFdBQVcsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1NBQ2pDO1FBRUQsT0FBTyxDQUNMLDZCQUFLLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQ2xELDZCQUFLLEtBQUssRUFBRSxXQUFXLEdBQUksQ0FDdkIsQ0FDUCxDQUFDO0lBQ0osQ0FBQztJQWdCSCxtQkFBQztBQUFELENBQUMsQUF2REQsQ0FBa0MsS0FBSyxDQUFDLFNBQVMsR0F1RGhEO0FBdkRZLG9DQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuLyoqXHJcbiAqIFNsaWRlciBwb3NpdGlvbnMgZm9yIGBUb2dnbGVTd2l0Y2hgLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGVudW0gVG9nZ2xlU3dpdGNoUG9zaXRpb24ge1xyXG4gIExlZnQgPSAnbGVmdCcsXHJcbiAgUmlnaHQgPSAncmlnaHQnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFdmVudCBhcmd1bWVudHMgZm9yIGBJVG9nZ2xlU3dpdGNoUHJvcHMub25Ub2dnbGVgLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJVG9nZ2xlRXZlbnRBcmdzIHtcclxuICBzbGlkZXJQb3NpdGlvbjogVG9nZ2xlU3dpdGNoUG9zaXRpb247XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVRvZ2dsZVN3aXRjaFByb3BzIHtcclxuICAvKipcclxuICAgKiBUaGUgQ1NTIGNvbG9yIHdoZW4gdGhlIGBUb2dnbGVTd2l0Y2hgIHNsaWRlciBpcyBpbiB0aGUgbGVmdCBwb3NpdGlvbi5cclxuICAgKiBFeGFtcGxlIHZhbHVlOiBgXCIjODAwMDAwXCJgXHJcbiAgICovXHJcbiAgbGVmdENvbG9yOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBDU1MgY29sb3Igd2hlbiB0aGUgYFRvZ2dsZVN3aXRjaGAgc2xpZGVyIGlzIGluIHRoZSByaWdodCBwb3NpdGlvbi5cclxuICAgKiBFeGFtcGxlIHZhbHVlOiBgXCIjMDA4MDAwXCJgXHJcbiAgICovXHJcbiAgcmlnaHRDb2xvcjogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBBbiBldmVudCB0aGF0IGZpcmVzIHdoZW4gdGhlIGBUb2dnbGVTd2l0Y2hgIGNvbnRyb2wgaXMgY2xpY2tlZC5cclxuICAgKi9cclxuICBvblRvZ2dsZT86IChzZW5kZXI6IFRvZ2dsZVN3aXRjaCwgYXJnczogSVRvZ2dsZUV2ZW50QXJncykgPT4gdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFByaXZhdGUgc3RhdGUgZm9yIFRvZ2dsZVN3aXRjaC5cclxuICovXHJcbmludGVyZmFjZSBJVG9nZ2xlU3dpdGNoU3RhdGUge1xyXG4gIHNsaWRlclBvc2l0aW9uOiBUb2dnbGVTd2l0Y2hQb3NpdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGV4YW1wbGUgY29tcG9uZW50IHRoYXQgcmVuZGVycyBhIHN3aXRjaCB3aG9zZSBzbGlkZXIgcG9zaXRpb24gY2FuIGJlIFwibGVmdFwiIG9yIFwicmlnaHRcIi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBUb2dnbGVTd2l0Y2ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVRvZ2dsZVN3aXRjaFByb3BzLCBJVG9nZ2xlU3dpdGNoU3RhdGU+IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IocHJvcHM6IElUb2dnbGVTd2l0Y2hQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgc2xpZGVyUG9zaXRpb246IFRvZ2dsZVN3aXRjaFBvc2l0aW9uLkxlZnRcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVuZGVyKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XHJcbiAgICBjb25zdCBmcmFtZVN0eWxlOiBSZWFjdC5DU1NQcm9wZXJ0aWVzID0ge1xyXG4gICAgICBib3JkZXJSYWRpdXM6ICcxMHB4JyxcclxuICAgICAgYmFja2dyb3VuZENvbG9yOlxyXG4gICAgICAgIHRoaXMuc3RhdGUuc2xpZGVyUG9zaXRpb24gPT09IFRvZ2dsZVN3aXRjaFBvc2l0aW9uLkxlZnRcclxuICAgICAgICAgID8gdGhpcy5wcm9wcy5sZWZ0Q29sb3JcclxuICAgICAgICAgIDogdGhpcy5wcm9wcy5yaWdodENvbG9yLFxyXG4gICAgICB3aWR0aDogJzM1cHgnLFxyXG4gICAgICBoZWlnaHQ6ICcyMHB4JyxcclxuICAgICAgY3Vyc29yOiAncG9pbnRlcidcclxuICAgIH07XHJcbiAgICBjb25zdCBzbGlkZXJTdHlsZTogUmVhY3QuQ1NTUHJvcGVydGllcyA9IHtcclxuICAgICAgYm9yZGVyUmFkaXVzOiAnMTBweCcsXHJcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJyNjMGMwYzAnLFxyXG4gICAgICB3aWR0aDogJzIwcHgnLFxyXG4gICAgICBoZWlnaHQ6ICcyMHB4J1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodGhpcy5zdGF0ZS5zbGlkZXJQb3NpdGlvbiA9PT0gVG9nZ2xlU3dpdGNoUG9zaXRpb24uTGVmdCkge1xyXG4gICAgICBzbGlkZXJTdHlsZS5tYXJnaW5MZWZ0ID0gJzBweCc7XHJcbiAgICAgIHNsaWRlclN0eWxlLm1hcmdpblJpZ2h0ID0gJ2F1dG8nO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2xpZGVyU3R5bGUubWFyZ2luTGVmdCA9ICdhdXRvJztcclxuICAgICAgc2xpZGVyU3R5bGUubWFyZ2luUmlnaHQgPSAnMHB4JztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IHN0eWxlPXtmcmFtZVN0eWxlfSBvbkNsaWNrPXt0aGlzLl9vbkNsaWNrU2xpZGVyfT5cclxuICAgICAgICA8ZGl2IHN0eWxlPXtzbGlkZXJTdHlsZX0gLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gUmVhY3QgZXZlbnQgaGFuZGxlcnMgc2hvdWxkIGJlIHJlcHJlc2VudGVkIGFzIGZpZWxkcyBpbnN0ZWFkIG9mIG1ldGhvZHMgdG8gZW5zdXJlIHRoZSBcInRoaXNcIiBwb2ludGVyXHJcbiAgLy8gaXMgYm91bmQgY29ycmVjdGx5LiAgVGhpcyBmb3JtIGRvZXMgbm90IHdvcmsgd2l0aCB2aXJ0dWFsL292ZXJyaWRlIGluaGVyaXRhbmNlLCBzbyB1c2UgcmVndWxhciBtZXRob2RzXHJcbiAgLy8gZXZlcnl3aGVyZSBlbHNlLlxyXG4gIHByaXZhdGUgX29uQ2xpY2tTbGlkZXIgPSAoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQpOiB2b2lkID0+IHtcclxuICAgIGlmICh0aGlzLnN0YXRlLnNsaWRlclBvc2l0aW9uID09PSBUb2dnbGVTd2l0Y2hQb3NpdGlvbi5MZWZ0KSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBzbGlkZXJQb3NpdGlvbjogVG9nZ2xlU3dpdGNoUG9zaXRpb24uUmlnaHQgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgc2xpZGVyUG9zaXRpb246IFRvZ2dsZVN3aXRjaFBvc2l0aW9uLkxlZnQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMucHJvcHMub25Ub2dnbGUpIHtcclxuICAgICAgdGhpcy5wcm9wcy5vblRvZ2dsZSh0aGlzLCB7IHNsaWRlclBvc2l0aW9uOiB0aGlzLnN0YXRlLnNsaWRlclBvc2l0aW9uIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuIl19