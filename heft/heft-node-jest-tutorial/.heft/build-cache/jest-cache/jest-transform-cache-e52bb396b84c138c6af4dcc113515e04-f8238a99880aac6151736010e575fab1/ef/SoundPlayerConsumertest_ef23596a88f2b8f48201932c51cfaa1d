71443caa9365e252109a1d774d285bf3
"use strict";
// This example is adapted from the Jest guide here:
// https://jestjs.io/docs/en/es6-class-mocks#manual-mock
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('./SoundPlayer'); // SoundPlayer is now a mock constructor
const SoundPlayer_1 = require("./SoundPlayer");
const SoundPlayer_2 = require("./__mocks__/SoundPlayer");
const SoundPlayerConsumer_1 = require("./SoundPlayerConsumer");
beforeEach(() => {
    // Clear all instances and calls to constructor and all methods:
    mocked(SoundPlayer_1.SoundPlayer).mockClear();
    SoundPlayer_2.mockPlaySoundFile.mockClear();
});
it('We can check if the consumer called the class constructor', () => {
    new SoundPlayerConsumer_1.SoundPlayerConsumer();
    expect(SoundPlayer_1.SoundPlayer).toHaveBeenCalledTimes(1);
});
it('We can check if the consumer called a method on the class instance', () => {
    const soundPlayerConsumer = new SoundPlayerConsumer_1.SoundPlayerConsumer();
    const coolSoundFileName = 'song.mp3';
    soundPlayerConsumer.playSomethingCool();
    expect(SoundPlayer_2.mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);
});
// The test below validates that jest-improved-resolver.js is working correctly
const SoundPlayer_3 = require("./__mocks__/SoundPlayer");
it('Importing ./__mocks__/SoundPlayer returns the same object as importing ./SoundPlayer', () => {
    expect(SoundPlayer_1.SoundPlayer).toBe(SoundPlayer_3.SoundPlayer);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXEdpdFxccnVzaHN0YWNrLXNhbXBsZXNcXGhlZnRcXGhlZnQtbm9kZS1qZXN0LXR1dG9yaWFsXFxzcmNcXGd1aWRlXFwwMi1tYW51YWwtbW9ja1xcU291bmRQbGF5ZXJDb25zdW1lci50ZXN0LnRzIiwic291cmNlcyI6WyJDOlxcR2l0XFxydXNoc3RhY2stc2FtcGxlc1xcaGVmdFxcaGVmdC1ub2RlLWplc3QtdHV0b3JpYWxcXHNyY1xcZ3VpZGVcXDAyLW1hbnVhbC1tb2NrXFxTb3VuZFBsYXllckNvbnN1bWVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9EQUFvRDtBQUNwRCx3REFBd0Q7O0FBRXhELElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyx3Q0FBd0M7QUFFcEUsK0NBQTRDO0FBQzVDLHlEQUE0RDtBQUM1RCwrREFBNEQ7QUFFNUQsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNkLGdFQUFnRTtJQUNoRSxNQUFNLENBQUMseUJBQVcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2hDLCtCQUFpQixDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ2hDLENBQUMsQ0FBQyxDQUFDO0FBRUgsRUFBRSxDQUFDLDJEQUEyRCxFQUFFLEdBQUcsRUFBRTtJQUNuRSxJQUFJLHlDQUFtQixFQUFFLENBQUM7SUFDMUIsTUFBTSxDQUFDLHlCQUFXLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQyxDQUFDLENBQUMsQ0FBQztBQUVILEVBQUUsQ0FBQyxvRUFBb0UsRUFBRSxHQUFHLEVBQUU7SUFDNUUsTUFBTSxtQkFBbUIsR0FBd0IsSUFBSSx5Q0FBbUIsRUFBRSxDQUFDO0lBQzNFLE1BQU0saUJBQWlCLEdBQVcsVUFBVSxDQUFDO0lBQzdDLG1CQUFtQixDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDeEMsTUFBTSxDQUFDLCtCQUFpQixDQUFDLENBQUMsb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUNwRSxDQUFDLENBQUMsQ0FBQztBQUVILCtFQUErRTtBQUMvRSx5REFBeUU7QUFFekUsRUFBRSxDQUFDLHNGQUFzRixFQUFFLEdBQUcsRUFBRTtJQUM5RixNQUFNLENBQUMseUJBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBZSxDQUFDLENBQUM7QUFDNUMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGV4YW1wbGUgaXMgYWRhcHRlZCBmcm9tIHRoZSBKZXN0IGd1aWRlIGhlcmU6XHJcbi8vIGh0dHBzOi8vamVzdGpzLmlvL2RvY3MvZW4vZXM2LWNsYXNzLW1vY2tzI21hbnVhbC1tb2NrXHJcblxyXG5qZXN0Lm1vY2soJy4vU291bmRQbGF5ZXInKTsgLy8gU291bmRQbGF5ZXIgaXMgbm93IGEgbW9jayBjb25zdHJ1Y3RvclxyXG5cclxuaW1wb3J0IHsgU291bmRQbGF5ZXIgfSBmcm9tICcuL1NvdW5kUGxheWVyJztcclxuaW1wb3J0IHsgbW9ja1BsYXlTb3VuZEZpbGUgfSBmcm9tICcuL19fbW9ja3NfXy9Tb3VuZFBsYXllcic7XHJcbmltcG9ydCB7IFNvdW5kUGxheWVyQ29uc3VtZXIgfSBmcm9tICcuL1NvdW5kUGxheWVyQ29uc3VtZXInO1xyXG5cclxuYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgLy8gQ2xlYXIgYWxsIGluc3RhbmNlcyBhbmQgY2FsbHMgdG8gY29uc3RydWN0b3IgYW5kIGFsbCBtZXRob2RzOlxyXG4gIG1vY2tlZChTb3VuZFBsYXllcikubW9ja0NsZWFyKCk7XHJcbiAgbW9ja1BsYXlTb3VuZEZpbGUubW9ja0NsZWFyKCk7XHJcbn0pO1xyXG5cclxuaXQoJ1dlIGNhbiBjaGVjayBpZiB0aGUgY29uc3VtZXIgY2FsbGVkIHRoZSBjbGFzcyBjb25zdHJ1Y3RvcicsICgpID0+IHtcclxuICBuZXcgU291bmRQbGF5ZXJDb25zdW1lcigpO1xyXG4gIGV4cGVjdChTb3VuZFBsYXllcikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xyXG59KTtcclxuXHJcbml0KCdXZSBjYW4gY2hlY2sgaWYgdGhlIGNvbnN1bWVyIGNhbGxlZCBhIG1ldGhvZCBvbiB0aGUgY2xhc3MgaW5zdGFuY2UnLCAoKSA9PiB7XHJcbiAgY29uc3Qgc291bmRQbGF5ZXJDb25zdW1lcjogU291bmRQbGF5ZXJDb25zdW1lciA9IG5ldyBTb3VuZFBsYXllckNvbnN1bWVyKCk7XHJcbiAgY29uc3QgY29vbFNvdW5kRmlsZU5hbWU6IHN0cmluZyA9ICdzb25nLm1wMyc7XHJcbiAgc291bmRQbGF5ZXJDb25zdW1lci5wbGF5U29tZXRoaW5nQ29vbCgpO1xyXG4gIGV4cGVjdChtb2NrUGxheVNvdW5kRmlsZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoY29vbFNvdW5kRmlsZU5hbWUpO1xyXG59KTtcclxuXHJcbi8vIFRoZSB0ZXN0IGJlbG93IHZhbGlkYXRlcyB0aGF0IGplc3QtaW1wcm92ZWQtcmVzb2x2ZXIuanMgaXMgd29ya2luZyBjb3JyZWN0bHlcclxuaW1wb3J0IHsgU291bmRQbGF5ZXIgYXMgTW9ja1NvdW5kUGxheWVyIH0gZnJvbSAnLi9fX21vY2tzX18vU291bmRQbGF5ZXInO1xyXG5cclxuaXQoJ0ltcG9ydGluZyAuL19fbW9ja3NfXy9Tb3VuZFBsYXllciByZXR1cm5zIHRoZSBzYW1lIG9iamVjdCBhcyBpbXBvcnRpbmcgLi9Tb3VuZFBsYXllcicsICgpID0+IHtcclxuICBleHBlY3QoU291bmRQbGF5ZXIpLnRvQmUoTW9ja1NvdW5kUGxheWVyKTtcclxufSk7XHJcbiJdfQ==