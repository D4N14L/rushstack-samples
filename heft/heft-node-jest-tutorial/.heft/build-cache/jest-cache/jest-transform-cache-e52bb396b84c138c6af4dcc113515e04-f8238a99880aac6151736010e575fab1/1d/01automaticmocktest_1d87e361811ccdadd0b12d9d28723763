c07ab35b89976e7c12ce00bf2bcb55d9
"use strict";
// This example is adapted from the Jest guide here:
// https://jestjs.io/docs/en/es6-class-mocks#automatic-mock
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('./SoundPlayer'); // SoundPlayer is now a mock constructor
const SoundPlayer_1 = require("./SoundPlayer");
const SoundPlayerConsumer_1 = require("./SoundPlayerConsumer");
beforeEach(() => {
    // Clear all instances and calls to constructor and all methods:
    mocked(SoundPlayer_1.SoundPlayer).mockClear();
});
it('We can check if the consumer called the class constructor', () => {
    new SoundPlayerConsumer_1.SoundPlayerConsumer();
    expect(SoundPlayer_1.SoundPlayer).toHaveBeenCalledTimes(1);
});
it('We can check if the consumer called a method on the class instance', () => {
    // Show that mockClear() is working:
    expect(SoundPlayer_1.SoundPlayer).not.toHaveBeenCalled();
    const soundPlayerConsumer = new SoundPlayerConsumer_1.SoundPlayerConsumer();
    // Constructor should have been called again:
    expect(SoundPlayer_1.SoundPlayer).toHaveBeenCalledTimes(1);
    const coolSoundFileName = 'song.mp3';
    soundPlayerConsumer.playSomethingCool();
    // mock.instances is available with automatic mocks:
    const mockSoundPlayerInstance = mocked(SoundPlayer_1.SoundPlayer).mock.instances[0];
    const mockPlaySoundFile = mocked(mockSoundPlayerInstance.playSoundFile);
    expect(mockPlaySoundFile.mock.calls[0][0]).toEqual(coolSoundFileName);
    // Equivalent to above check:
    expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);
    expect(mockPlaySoundFile).toHaveBeenCalledTimes(1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXEdpdFxccnVzaHN0YWNrLXNhbXBsZXNcXGhlZnRcXGhlZnQtbm9kZS1qZXN0LXR1dG9yaWFsXFxzcmNcXGd1aWRlXFwwMS1hdXRvbWF0aWMtbW9jay50ZXN0LnRzIiwic291cmNlcyI6WyJDOlxcR2l0XFxydXNoc3RhY2stc2FtcGxlc1xcaGVmdFxcaGVmdC1ub2RlLWplc3QtdHV0b3JpYWxcXHNyY1xcZ3VpZGVcXDAxLWF1dG9tYXRpYy1tb2NrLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9EQUFvRDtBQUNwRCwyREFBMkQ7O0FBRTNELElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyx3Q0FBd0M7QUFFcEUsK0NBQTRDO0FBQzVDLCtEQUE0RDtBQUU1RCxVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsZ0VBQWdFO0lBQ2hFLE1BQU0sQ0FBQyx5QkFBVyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDbEMsQ0FBQyxDQUFDLENBQUM7QUFFSCxFQUFFLENBQUMsMkRBQTJELEVBQUUsR0FBRyxFQUFFO0lBQ25FLElBQUkseUNBQW1CLEVBQUUsQ0FBQztJQUMxQixNQUFNLENBQUMseUJBQVcsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9DLENBQUMsQ0FBQyxDQUFDO0FBRUgsRUFBRSxDQUFDLG9FQUFvRSxFQUFFLEdBQUcsRUFBRTtJQUM1RSxvQ0FBb0M7SUFDcEMsTUFBTSxDQUFDLHlCQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUUzQyxNQUFNLG1CQUFtQixHQUF3QixJQUFJLHlDQUFtQixFQUFFLENBQUM7SUFDM0UsNkNBQTZDO0lBQzdDLE1BQU0sQ0FBQyx5QkFBVyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFN0MsTUFBTSxpQkFBaUIsR0FBVyxVQUFVLENBQUM7SUFDN0MsbUJBQW1CLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUV4QyxvREFBb0Q7SUFDcEQsTUFBTSx1QkFBdUIsR0FBZ0IsTUFBTSxDQUFDLHlCQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRW5GLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLHVCQUF1QixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3hFLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFdEUsNkJBQTZCO0lBQzdCLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDbEUsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckQsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGV4YW1wbGUgaXMgYWRhcHRlZCBmcm9tIHRoZSBKZXN0IGd1aWRlIGhlcmU6XHJcbi8vIGh0dHBzOi8vamVzdGpzLmlvL2RvY3MvZW4vZXM2LWNsYXNzLW1vY2tzI2F1dG9tYXRpYy1tb2NrXHJcblxyXG5qZXN0Lm1vY2soJy4vU291bmRQbGF5ZXInKTsgLy8gU291bmRQbGF5ZXIgaXMgbm93IGEgbW9jayBjb25zdHJ1Y3RvclxyXG5cclxuaW1wb3J0IHsgU291bmRQbGF5ZXIgfSBmcm9tICcuL1NvdW5kUGxheWVyJztcclxuaW1wb3J0IHsgU291bmRQbGF5ZXJDb25zdW1lciB9IGZyb20gJy4vU291bmRQbGF5ZXJDb25zdW1lcic7XHJcblxyXG5iZWZvcmVFYWNoKCgpID0+IHtcclxuICAvLyBDbGVhciBhbGwgaW5zdGFuY2VzIGFuZCBjYWxscyB0byBjb25zdHJ1Y3RvciBhbmQgYWxsIG1ldGhvZHM6XHJcbiAgbW9ja2VkKFNvdW5kUGxheWVyKS5tb2NrQ2xlYXIoKTtcclxufSk7XHJcblxyXG5pdCgnV2UgY2FuIGNoZWNrIGlmIHRoZSBjb25zdW1lciBjYWxsZWQgdGhlIGNsYXNzIGNvbnN0cnVjdG9yJywgKCkgPT4ge1xyXG4gIG5ldyBTb3VuZFBsYXllckNvbnN1bWVyKCk7XHJcbiAgZXhwZWN0KFNvdW5kUGxheWVyKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbn0pO1xyXG5cclxuaXQoJ1dlIGNhbiBjaGVjayBpZiB0aGUgY29uc3VtZXIgY2FsbGVkIGEgbWV0aG9kIG9uIHRoZSBjbGFzcyBpbnN0YW5jZScsICgpID0+IHtcclxuICAvLyBTaG93IHRoYXQgbW9ja0NsZWFyKCkgaXMgd29ya2luZzpcclxuICBleHBlY3QoU291bmRQbGF5ZXIpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcblxyXG4gIGNvbnN0IHNvdW5kUGxheWVyQ29uc3VtZXI6IFNvdW5kUGxheWVyQ29uc3VtZXIgPSBuZXcgU291bmRQbGF5ZXJDb25zdW1lcigpO1xyXG4gIC8vIENvbnN0cnVjdG9yIHNob3VsZCBoYXZlIGJlZW4gY2FsbGVkIGFnYWluOlxyXG4gIGV4cGVjdChTb3VuZFBsYXllcikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xyXG5cclxuICBjb25zdCBjb29sU291bmRGaWxlTmFtZTogc3RyaW5nID0gJ3NvbmcubXAzJztcclxuICBzb3VuZFBsYXllckNvbnN1bWVyLnBsYXlTb21ldGhpbmdDb29sKCk7XHJcblxyXG4gIC8vIG1vY2suaW5zdGFuY2VzIGlzIGF2YWlsYWJsZSB3aXRoIGF1dG9tYXRpYyBtb2NrczpcclxuICBjb25zdCBtb2NrU291bmRQbGF5ZXJJbnN0YW5jZTogU291bmRQbGF5ZXIgPSBtb2NrZWQoU291bmRQbGF5ZXIpLm1vY2suaW5zdGFuY2VzWzBdO1xyXG5cclxuICBjb25zdCBtb2NrUGxheVNvdW5kRmlsZSA9IG1vY2tlZChtb2NrU291bmRQbGF5ZXJJbnN0YW5jZS5wbGF5U291bmRGaWxlKTtcclxuICBleHBlY3QobW9ja1BsYXlTb3VuZEZpbGUubW9jay5jYWxsc1swXVswXSkudG9FcXVhbChjb29sU291bmRGaWxlTmFtZSk7XHJcblxyXG4gIC8vIEVxdWl2YWxlbnQgdG8gYWJvdmUgY2hlY2s6XHJcbiAgZXhwZWN0KG1vY2tQbGF5U291bmRGaWxlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjb29sU291bmRGaWxlTmFtZSk7XHJcbiAgZXhwZWN0KG1vY2tQbGF5U291bmRGaWxlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbn0pO1xyXG4iXX0=