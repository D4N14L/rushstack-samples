be287965f998d60dab5644d11cb1cd92
"use strict";
// This example is adapted from the Jest guide here:
// https://jestjs.io/docs/en/es6-class-mocks#complete-example
Object.defineProperty(exports, "__esModule", { value: true });
const mockPlaySoundFile = jest.fn();
jest.mock('./SoundPlayer', () => {
    return {
        SoundPlayer: jest.fn().mockImplementation(() => {
            return { playSoundFile: mockPlaySoundFile };
        })
    };
});
const SoundPlayerConsumer_1 = require("./SoundPlayerConsumer");
const SoundPlayer_1 = require("./SoundPlayer");
beforeEach(() => {
    mocked(SoundPlayer_1.SoundPlayer).mockClear();
    mockPlaySoundFile.mockClear();
});
it('The consumer should be able to call new() on SoundPlayer', () => {
    const soundPlayerConsumer = new SoundPlayerConsumer_1.SoundPlayerConsumer();
    // Ensure constructor created the object:
    expect(soundPlayerConsumer).toBeTruthy();
});
it('We can check if the consumer called the class constructor', () => {
    new SoundPlayerConsumer_1.SoundPlayerConsumer();
    expect(SoundPlayer_1.SoundPlayer).toHaveBeenCalledTimes(1);
});
it('We can check if the consumer called a method on the class instance', () => {
    const soundPlayerConsumer = new SoundPlayerConsumer_1.SoundPlayerConsumer();
    const coolSoundFileName = 'song.mp3';
    soundPlayerConsumer.playSomethingCool();
    expect(mockPlaySoundFile.mock.calls[0][0]).toEqual(coolSoundFileName);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXEdpdFxccnVzaHN0YWNrLXNhbXBsZXNcXGhlZnRcXGhlZnQtbm9kZS1qZXN0LXR1dG9yaWFsXFxzcmNcXGd1aWRlXFwwMy1mYWN0b3J5LWNvbnN0cnVjdG9yLW1vY2sudGVzdC50cyIsInNvdXJjZXMiOlsiQzpcXEdpdFxccnVzaHN0YWNrLXNhbXBsZXNcXGhlZnRcXGhlZnQtbm9kZS1qZXN0LXR1dG9yaWFsXFxzcmNcXGd1aWRlXFwwMy1mYWN0b3J5LWNvbnN0cnVjdG9yLW1vY2sudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0RBQW9EO0FBQ3BELDZEQUE2RDs7QUFFN0QsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7QUFFcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO0lBQzlCLE9BQU87UUFDTCxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtZQUM3QyxPQUFPLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixFQUFFLENBQUM7UUFDOUMsQ0FBQyxDQUFDO0tBQ0gsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsK0RBQTREO0FBQzVELCtDQUE0QztBQUU1QyxVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsTUFBTSxDQUFDLHlCQUFXLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNoQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNoQyxDQUFDLENBQUMsQ0FBQztBQUVILEVBQUUsQ0FBQywwREFBMEQsRUFBRSxHQUFHLEVBQUU7SUFDbEUsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLHlDQUFtQixFQUFFLENBQUM7SUFDdEQseUNBQXlDO0lBQ3pDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQzNDLENBQUMsQ0FBQyxDQUFDO0FBRUgsRUFBRSxDQUFDLDJEQUEyRCxFQUFFLEdBQUcsRUFBRTtJQUNuRSxJQUFJLHlDQUFtQixFQUFFLENBQUM7SUFDMUIsTUFBTSxDQUFDLHlCQUFXLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQyxDQUFDLENBQUMsQ0FBQztBQUVILEVBQUUsQ0FBQyxvRUFBb0UsRUFBRSxHQUFHLEVBQUU7SUFDNUUsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLHlDQUFtQixFQUFFLENBQUM7SUFDdEQsTUFBTSxpQkFBaUIsR0FBVyxVQUFVLENBQUM7SUFDN0MsbUJBQW1CLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUN4QyxNQUFNLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3hFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBleGFtcGxlIGlzIGFkYXB0ZWQgZnJvbSB0aGUgSmVzdCBndWlkZSBoZXJlOlxyXG4vLyBodHRwczovL2plc3Rqcy5pby9kb2NzL2VuL2VzNi1jbGFzcy1tb2NrcyNjb21wbGV0ZS1leGFtcGxlXHJcblxyXG5jb25zdCBtb2NrUGxheVNvdW5kRmlsZSA9IGplc3QuZm4oKTtcclxuXHJcbmplc3QubW9jaygnLi9Tb3VuZFBsYXllcicsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgU291bmRQbGF5ZXI6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xyXG4gICAgICByZXR1cm4geyBwbGF5U291bmRGaWxlOiBtb2NrUGxheVNvdW5kRmlsZSB9O1xyXG4gICAgfSlcclxuICB9O1xyXG59KTtcclxuXHJcbmltcG9ydCB7IFNvdW5kUGxheWVyQ29uc3VtZXIgfSBmcm9tICcuL1NvdW5kUGxheWVyQ29uc3VtZXInO1xyXG5pbXBvcnQgeyBTb3VuZFBsYXllciB9IGZyb20gJy4vU291bmRQbGF5ZXInO1xyXG5cclxuYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgbW9ja2VkKFNvdW5kUGxheWVyKS5tb2NrQ2xlYXIoKTtcclxuICBtb2NrUGxheVNvdW5kRmlsZS5tb2NrQ2xlYXIoKTtcclxufSk7XHJcblxyXG5pdCgnVGhlIGNvbnN1bWVyIHNob3VsZCBiZSBhYmxlIHRvIGNhbGwgbmV3KCkgb24gU291bmRQbGF5ZXInLCAoKSA9PiB7XHJcbiAgY29uc3Qgc291bmRQbGF5ZXJDb25zdW1lciA9IG5ldyBTb3VuZFBsYXllckNvbnN1bWVyKCk7XHJcbiAgLy8gRW5zdXJlIGNvbnN0cnVjdG9yIGNyZWF0ZWQgdGhlIG9iamVjdDpcclxuICBleHBlY3Qoc291bmRQbGF5ZXJDb25zdW1lcikudG9CZVRydXRoeSgpO1xyXG59KTtcclxuXHJcbml0KCdXZSBjYW4gY2hlY2sgaWYgdGhlIGNvbnN1bWVyIGNhbGxlZCB0aGUgY2xhc3MgY29uc3RydWN0b3InLCAoKSA9PiB7XHJcbiAgbmV3IFNvdW5kUGxheWVyQ29uc3VtZXIoKTtcclxuICBleHBlY3QoU291bmRQbGF5ZXIpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcclxufSk7XHJcblxyXG5pdCgnV2UgY2FuIGNoZWNrIGlmIHRoZSBjb25zdW1lciBjYWxsZWQgYSBtZXRob2Qgb24gdGhlIGNsYXNzIGluc3RhbmNlJywgKCkgPT4ge1xyXG4gIGNvbnN0IHNvdW5kUGxheWVyQ29uc3VtZXIgPSBuZXcgU291bmRQbGF5ZXJDb25zdW1lcigpO1xyXG4gIGNvbnN0IGNvb2xTb3VuZEZpbGVOYW1lOiBzdHJpbmcgPSAnc29uZy5tcDMnO1xyXG4gIHNvdW5kUGxheWVyQ29uc3VtZXIucGxheVNvbWV0aGluZ0Nvb2woKTtcclxuICBleHBlY3QobW9ja1BsYXlTb3VuZEZpbGUubW9jay5jYWxsc1swXVswXSkudG9FcXVhbChjb29sU291bmRGaWxlTmFtZSk7XHJcbn0pO1xyXG4iXX0=